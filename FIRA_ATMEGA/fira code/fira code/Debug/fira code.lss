
fira code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  00000236  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000028e  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000177  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001f6  00000000  00000000  000006db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000cc  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ce  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ab  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00000c19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  88:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Uart_Write>:
#include "Peripherals.h"
volatile int8_t Data = 0,Flag=0,Send_Ticks=0;
volatile int Ticks=0;
void Uart_Write(uint8_t Data)
{
	while(!(UCSR0A & (1<<UDRE0)));
  90:	e0 ec       	ldi	r30, 0xC0	; 192
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	95 ff       	sbrs	r25, 5
  98:	fd cf       	rjmp	.-6      	; 0x94 <Uart_Write+0x4>
	UDR0=Data;
  9a:	80 93 c6 00 	sts	0x00C6, r24
  9e:	08 95       	ret

000000a0 <main>:
}
int main(void)
{
	Initialise_Port();
  a0:	0e 94 cb 00 	call	0x196	; 0x196 <Initialise_Port>
	Initialise_UART(25);	
  a4:	89 e1       	ldi	r24, 0x19	; 25
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Initialise_UART>
	//Initialise_Timer();
	Initialise_Interrupt();
  ac:	0e 94 c5 00 	call	0x18a	; 0x18a <Initialise_Interrupt>
	sei();
  b0:	78 94       	sei
			{
				Ticks=255;
			}
			else if(Ticks<-255)
			{
				Ticks=-255;
  b2:	01 e0       	ldi	r16, 0x01	; 1
  b4:	1f ef       	ldi	r17, 0xFF	; 255
	{
		if(Flag==1)
		{
			if(Ticks>255)
			{
				Ticks=255;
  b6:	cf ef       	ldi	r28, 0xFF	; 255
  b8:	d0 e0       	ldi	r29, 0x00	; 0
	//Initialise_Timer();
	Initialise_Interrupt();
	sei();
	while (1)
	{
		if(Flag==1)
  ba:	80 91 03 01 	lds	r24, 0x0103
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x1a>
		{
			if(Ticks>255)
  c2:	80 91 00 01 	lds	r24, 0x0100
  c6:	90 91 01 01 	lds	r25, 0x0101
  ca:	8f 3f       	cpi	r24, 0xFF	; 255
  cc:	91 05       	cpc	r25, r1
  ce:	31 f0       	breq	.+12     	; 0xdc <main+0x3c>
  d0:	2c f0       	brlt	.+10     	; 0xdc <main+0x3c>
			{
				Ticks=255;
  d2:	d0 93 01 01 	sts	0x0101, r29
  d6:	c0 93 00 01 	sts	0x0100, r28
  da:	0b c0       	rjmp	.+22     	; 0xf2 <main+0x52>
			}
			else if(Ticks<-255)
  dc:	80 91 00 01 	lds	r24, 0x0100
  e0:	90 91 01 01 	lds	r25, 0x0101
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	9f 4f       	sbci	r25, 0xFF	; 255
  e8:	24 f4       	brge	.+8      	; 0xf2 <main+0x52>
			{
				Ticks=-255;
  ea:	10 93 01 01 	sts	0x0101, r17
  ee:	00 93 00 01 	sts	0x0100, r16
			}
			Send_Ticks=Ticks/2;
  f2:	80 91 00 01 	lds	r24, 0x0100
  f6:	90 91 01 01 	lds	r25, 0x0101
  fa:	99 23       	and	r25, r25
  fc:	0c f4       	brge	.+2      	; 0x100 <main+0x60>
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	95 95       	asr	r25
 102:	87 95       	ror	r24
 104:	80 93 02 01 	sts	0x0102, r24
			Uart_Write(Send_Ticks);
 108:	80 91 02 01 	lds	r24, 0x0102
 10c:	0e 94 48 00 	call	0x90	; 0x90 <Uart_Write>
			Ticks=0;
 110:	10 92 01 01 	sts	0x0101, r1
 114:	10 92 00 01 	sts	0x0100, r1
			Flag=0;
 118:	10 92 03 01 	sts	0x0103, r1
 11c:	ce cf       	rjmp	.-100    	; 0xba <main+0x1a>

0000011e <__vector_1>:
{
	Flag=1;
	PORTC=~PORTC;
}*/
ISR(INT0_vect)
{	
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	if((PIND >> 3) & 1)
 12c:	4b 9b       	sbis	0x09, 3	; 9
 12e:	0a c0       	rjmp	.+20     	; 0x144 <__vector_1+0x26>
	Ticks++;											
 130:	80 91 00 01 	lds	r24, 0x0100
 134:	90 91 01 01 	lds	r25, 0x0101
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 01 01 	sts	0x0101, r25
 13e:	80 93 00 01 	sts	0x0100, r24
 142:	09 c0       	rjmp	.+18     	; 0x156 <__vector_1+0x38>
	else
	Ticks--;
 144:	80 91 00 01 	lds	r24, 0x0100
 148:	90 91 01 01 	lds	r25, 0x0101
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	90 93 01 01 	sts	0x0101, r25
 152:	80 93 00 01 	sts	0x0100, r24
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_18>:
ISR(USART_RX_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
	Data = UDR0;
 170:	80 91 c6 00 	lds	r24, 0x00C6
 174:	80 93 04 01 	sts	0x0104, r24
	Flag=1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 03 01 	sts	0x0103, r24
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <Initialise_Interrupt>:

#include "Peripherals.h"

void Initialise_Interrupt(void)
{
	EICRA = 0b00000010;
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0b00000001;				//Configure INT0(PD2) and INT1(PD3) as falling edge triggered interrupts //Enable INT0 & INT1
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	8d bb       	out	0x1d, r24	; 29
 194:	08 95       	ret

00000196 <Initialise_Port>:
	return;
}
void Initialise_Port(void)
{
	DDRD = 0b00000010;
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0b00000101;
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	85 60       	ori	r24, 0x05	; 5
 19e:	8b b9       	out	0x0b, r24	; 11
	
	DDRC = 255;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;
 1a4:	18 b8       	out	0x08, r1	; 8
 1a6:	08 95       	ret

000001a8 <Initialise_UART>:
}
void Initialise_UART(uint16_t ubrrvalue)
{
	UBRR0H=(unsigned char)(ubrrvalue>>8);
 1a8:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L=(unsigned char)ubrrvalue;
 1ac:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0C = (3<<UCSZ00);
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	80 93 c2 00 	sts	0x00C2, r24

	UCSR0B = (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 1b6:	88 e9       	ldi	r24, 0x98	; 152
 1b8:	80 93 c1 00 	sts	0x00C1, r24
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
